# ================== Python build artifacts ==================
*.pyc
*.pyo
*.pyd
*.swp
__pycache__/
*.egg
*.egg-info/
.installed.cfg
develop-eggs/
dist/
downloads/
eggs/
.eggs/
build/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
MANIFEST

# ================== Jupyter notebooks ==================
.ipynb_checkpoints/
# Если не хочешь держать тяжелые ноутбуки — раскомментируй:
# *.ipynb
imc-2025-solution.ipynb

# ================== Virtual environments ==================
.env
.env.local
.env.*
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.env.docker
.python-version

# ================== Logs and coverage ==================
logs/
*.log
pip-log.txt
pip-delete-this-directory.txt
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# ================== Static type checkers / linters ==================
.mypy_cache/
.dmypy.json
.pyre/
.pytype/
.ruff_cache/
.pyright/
.pylintrc-local

# ================== Dependency/Env managers ==================
Pipfile.lock
poetry.lock
uv.lock
pdm.lock
.pdm.toml
.pdm-python
.pdm-build/

# ================== Docker ==================
docker-compose.override.yml
*.env.docker
Dockerfile.*          # если есть общий Dockerfile без суффиксов — оставь его в репо
.docker/
# Локальные volume-папки (если монтируешь прямо в репо)
# pgdata/
# db_data/
# docker-data/
# data/

# ================== Alembic / migrations ==================
# ⚠️ Миграции обычно КОММИТЯТ. Поэтому не игнорируем.
# Если вдруг нужно исключить локальные «грязные» автогенерации:
# alembic/versions/_tmp_*.py

# ================== FastAPI autogenerated ==================
__pydantic_main__.py

# ================== Project configs / secrets ==================
config.yml
config.json
# .env* уже игнорим выше — но оставь .env.example в репо

# ================== Local DB files (dev/test) ==================
*.sqlite
*.sqlite3
*.db

# ================== Docs ==================
docs/_build/

# ================== Temp ==================
tmp/
temp/

# ================== Direnv ==================
.envrc

# ================== SBOM / security scan outputs ==================
pip-audit.json
cyclonedx.json
sbom.json

# ================== OS / Editor trash ==================
# macOS
.DS_Store
.AppleDouble
.LSOverride
# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
# Linux
*~

# ================== IDE and editor settings ==================
.idea/
.vscode/
.spyderproject
.spyproject
.ropeproject

# ================== Datasets / media (проекты/заглушки) ==================
datasets/
mock_static/product-images/
mock_static/product-images_/
mock_static/uploads/
# Если появятся «боевые» каталоги, добавляй их по аналогии

# ================== ML / DL artifacts ==================
# TensorBoard / Lightning / W&B / MLflow
runs/
lightning_logs/
wandb/
mlruns/
# Checkpoints / модели (общие паттерны; держите *.config в репо)
*.pth
*.pt
*.ckpt
*.tflite
*.onnx
*.h5
*.pb
# HuggingFace / cache
.huggingface/
.cache/huggingface/

# ================== Graph / Viz / GNN tooling ==================
# Graphviz/NetworkX/другие генераторы — исходники .dot/.gv обычно полезно хранить, а рендеры — нет
# Исходники НЕ игнорим:
# *.dot
# *.gv
# Выходные артефакты визуализаций:
graph_outputs/
*.gv.pdf
*.gv.png
*.dot.pdf
*.dot.png

# ================== Node/JS (если рядом фронт или GraphQL codegen) ==================
# node_modules/
# npm-debug.log*
# yarn-debug.log*
# yarn-error.log*
# pnpm-debug.log*
# package-lock.json        # обычно коммитят; закомментировано по умолчанию
# yarn.lock                # обычно коммитят
# pnpm-lock.yaml           # обычно коммитят
.next/
.nuxt/
.svelte-kit/
coverage-*

# ================== Terraform / Ansible / K8s (инфраструктура) ==================
.terraform/
*.tfstate
*.tfstate.*
crash.log
override.tf
override.tf.json
terraform.tfvars
*.auto.tfvars
*.retry

# ================== OpenAPI (optional, если генерируешь на лету) ==================
# openapi.json
# openapi.yaml
# openapi-schema.json

# ================== Misc tools ==================
# Celery beat schedule
celerybeat-schedule
# pytest-xdist
.unitcache/
# pip-tools output (если не хочешь фиксировать compiled requirements)
# requirements.txt

# ================== Datasets / media ==================
datasets/
mock_static/uploads/

# ================== Mac OS ==================
.DS_Store
