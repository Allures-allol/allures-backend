# services/review_service/test_product_proxy.py

# test_product_proxy.py

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from services.review_service.models.product_proxy import ProductDb
from services.review_service.models.review import Review

# üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AlluresDb (–ø—Ä–æ–¥—É–∫—Ç—ã)
ALLURES_DB_URL = "mssql+pyodbc://localhost,1433/AlluresDb?driver=ODBC%20Driver%2017%20for%20SQL%20Server&;Trusted_Connection=yes"
ProductEngine = create_engine(ALLURES_DB_URL)
ProductSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=ProductEngine)

# üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ReviewDb (–æ—Ç–∑—ã–≤—ã)
REVIEW_DB_URL = "mssql+pyodbc://localhost,1433/ReviewDb?driver=ODBC%20Driver%2017%20for%20SQL%20Server&;Trusted_Connection=yes"
ReviewEngine = create_engine(REVIEW_DB_URL)
ReviewSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=ReviewEngine)

def main():
    product_db = ProductSessionLocal()
    review_db = ReviewSessionLocal()

    try:
        print("\nüîç –ü—Ä–æ–¥—É–∫—Ç—ã –∏–∑ AlluresDb:")
        products = product_db.query(ProductDb).limit(5).all()

        if not products:
            print("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö AlluresDb.")
        else:
            for p in products:
                print(f"\n‚úÖ ID: {p.id} | –ù–∞–∑–≤–∞–Ω–∏–µ: {p.name} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {p.category_name}")
                print(f"üìÉ –û–ø–∏—Å–∞–Ω–∏–µ: {p.description}")

                # –ò—â–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
                reviews = review_db.query(Review).filter(Review.product_id == p.id).all()
                if reviews:
                    print("üó£ –û—Ç–∑—ã–≤—ã:")
                    for r in reviews:
                        print(f"  ‚Ä¢ [{r.sentiment.upper()}] {r.text}")
                else:
                    print("üï≥ –û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.")
    finally:
        product_db.close()
        review_db.close()

if __name__ == "__main__":
    main()
