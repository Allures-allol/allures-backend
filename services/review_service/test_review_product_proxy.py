# test_review_product_proxy.py

import os
from dotenv import load_dotenv
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from common.models.products import Product
from services.review_service.models.review import Review

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
MAINDB_URL = os.getenv("MAINDB_URL")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
engine = create_engine(MAINDB_URL, echo=False, future=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def test_products_query():
    """
    ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏ –æ—Ç–∑—ã–≤–æ–≤.
    """
    db = SessionLocal()
    try:
        products = db.query(Product).limit(5).all()
        assert products, "‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        for p in products:
            category = p.category.name if p.category else "‚Äî"
            print(f"\nüõç ID: {p.id} | –ù–∞–∑–≤–∞–Ω–∏–µ: {p.name} | –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {p.description}")

            reviews = db.query(Review).filter(Review.product_id == p.id).all()
            if reviews:
                print("üí¨ –û—Ç–∑—ã–≤—ã:")
                for r in reviews:
                    print(f"  ‚Ä¢ [{r.sentiment.upper()}] {r.text}")
            else:
                print("üîï –û—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.")
    except Exception as e:
        assert False, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
    finally:
        db.close()
