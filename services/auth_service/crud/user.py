# üìÅ services/auth_service/crud/user.py
from sqlalchemy.orm import Session, joinedload
from sqlalchemy.exc import IntegrityError
from fastapi import HTTPException
from datetime import datetime

from common.models.user import User
from common.models.subscriptions import UserSubscription
from services.auth_service.utils.security import hash_password, verify_password
from services.auth_service.schemas.user import UserCreate

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_user(db: Session, user: UserCreate):
    db_user = User(
        login=user.login,
        password=hash_password(user.password)
    )
    try:
        db.add(db_user)
        db.commit()
        db.refresh(db_user)
        return db_user
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=400, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º –ª–æ–≥—ñ–Ω–æ–º –≤–∂–µ —ñ—Å–Ω—É—î")
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {str(e)}")


# ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
def authenticate_user(db: Session, login: str, password: str):
    user = db.query(User).filter(User.login == login).first()

    if not user:
        raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    if user.is_blocked:
        raise HTTPException(status_code=403, detail="–ê–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ")
    if not verify_password(password, user.password):
        raise HTTPException(status_code=401, detail="–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å")

    return user

# ‚úÖ –í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
def get_all_users(db: Session):
    return db.query(User).all()

# ‚úÖ –ó–∞–ø–∏—Ç –Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
def forgot_password(db: Session, email: str):
    user = db.query(User).filter(User.login == email).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    return {"message": f"–õ–∏—Å—Ç –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ {email}"}

# ‚úÖ –°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
def reset_password(db: Session, email: str, new_password: str):
    user = db.query(User).filter(User.login == email).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    user.password = hash_password(new_password)
    db.commit()
    return {"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ"}

# ‚úÖ –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—ñ–¥–ø–∏—Å–∫–æ—é
def get_user_by_login(db: Session, login: str):
    user = db.query(User).options(
        joinedload(User.uploads),
        joinedload(User.subscriptions).joinedload(UserSubscription.subscription)
    ).filter(User.login == login).first()

    if user:
        active_sub = next((s for s in user.subscriptions if s.is_active), None)
        user.subscription_type = active_sub.subscription.name if active_sub else "none"
    return user

# ‚úÖ –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
def change_password(db: Session, login: str, old_password: str, new_password: str):
    user = get_user_by_login(db, login)
    if not user or not verify_password(old_password, user.password):
        return None
    user.password = hash_password(new_password)
    db.commit()
    return user

# ‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def delete_user_by_id(db: Session, user_id: int):
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if user:
            db.delete(user)
            db.commit()
            return True
        return False
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}")