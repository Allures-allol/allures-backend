# services/auth_service/main.py

import sys
import os

# –∑–∞–≥—Ä—É–∂–∞–µ–º .env –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ
from dotenv import load_dotenv

load_dotenv()

# –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –∑–∞–≥—Ä—É–∑—á–∏–∫, –µ—Å–ª–∏ –æ–Ω —É —Ç–µ–±—è —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—Ç (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –±—ã–ª–æ)
import common.utils.env_loader  # noqa: F401

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—â–∏–º –º–æ–¥—É–ª—è–º)
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../")))

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import text

from services.auth_service.routers import auth as auth_router
from services.auth_service.routers import profile as profile_router
from common.db.session import get_db


# ---- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ----
jwt_secret = os.getenv("JWT_SECRET")
if jwt_secret:
    print(f"üîê JWT_SECRET –∑–∞–≥—Ä—É–∂–µ–Ω: {jwt_secret[:10]}... (–¥–ª–∏–Ω–∞ = {len(jwt_secret)})")
else:
    print("‚ùå JWT_SECRET –ù–ï –ù–ê–ô–î–ï–ù! –ü—Ä–æ–≤–µ—Ä—å .env —Ñ–∞–π–ª")

# root_path –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∏—Å–∏—Ç –∑–∞ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º —É —Ä–µ–≤—ë—Ä—Å-–ø—Ä–æ–∫—Å–∏
# (–Ω–∞–ø—Ä–∏–º–µ—Ä, Nginx –æ—Ç–¥–∞—ë—Ç —Å–µ—Ä–≤–∏—Å –ø–æ /auth). –ò–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º.
_use_root = os.getenv("AUTH_USE_ROOT_PATH", "0").strip().lower() in ("1", "true", "yes")
ROOT_PATH = "/auth" if _use_root else ""

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
app = FastAPI(
    title="Auth Service",
    root_path=ROOT_PATH,          # << –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
)

# --- CORS ---
# –ú–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ .env: CORS_ALLOWED_ORIGINS=...,...
_cors_env = os.getenv("CORS_ALLOWED_ORIGINS", "")
if _cors_env.strip():
    ALLOWED_ORIGINS = [o.strip() for o in _cors_env.split(",") if o.strip()]
else:
    # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –ª–æ–∫–∞–ª–∫–∏
    ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "https://alluresallol.com",
        "https://api.alluresallol.com",
    ]

app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,   # –º–æ–∂–Ω–æ True ‚Äî –≤–¥—Ä—É–≥ —Ä–µ—à–∏—à—å —Å—Ç–∞–≤–∏—Ç—å cookie –≤ –±—É–¥—É—â–µ–º
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –†–æ—É—Ç–µ—Ä—ã ---
# –í–ù–ò–ú–ê–ù–ò–ï: —Å–∞–º —Ä–æ—É—Ç–µ—Ä auth –∏–º–µ–µ—Ç prefix="/auth", –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å root_path –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "/auth" –≤ DEV.
# –ú—ã —ç—Ç–æ —É–∂–µ —É—á–ª–∏ —á–µ—Ä–µ–∑ AUTH_USE_ROOT_PATH.
app.include_router(auth_router.router)      # tags –∑–∞–¥–∞–Ω—ã –≤–Ω—É—Ç—Ä–∏ —Ä–æ—É—Ç–µ—Ä–∞
app.include_router(profile_router.router)   # –ø—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –µ—Å—Ç—å

# --- Health check ---
@app.get("/health", tags=["meta"])
def health():
    return {"status": "ok"}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL ---
@app.on_event("startup")
def startup_event():
    db_gen = get_db()
    db = next(db_gen)
    try:
        db.execute(text("SELECT 1"))
        print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (Authorization Service)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
    finally:
        db.close()

# --- –ö–æ—Ä–µ–Ω—å ---
@app.get("/", tags=["meta"])
def read_root():
    return {"message": "Authorization Service is running."}

# –ó–∞–ø—É—Å–∫:
# uvicorn services.auth_service.main:app --reload --port 8003
