# services/subscription_service/routers/subscription_routers.py
from __future__ import annotations

from typing import List, Optional, Tuple

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from sqlalchemy import func

from common.db.session import get_db
from common.models.subscriptions import Subscription
from services.subscription_service.utils.security import get_user_id_optional
from services.subscription_service.crud import subscription_crud
from services.subscription_service.schemas.subscription_schemas import (
    SubscriptionOut,
    UserSubscriptionOut,
)

# –í–ê–ñ–ù–û: —Ç–µ–≥–∏ ‚Äî —Ç–∞–∫ Swagger –±—É–¥–µ—Ç —á–µ—Å—Ç–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å /subscription/...
router = APIRouter()

# ---- helpers ----

_SYNONYM_TO_CODE = {
    "–±–∞–∑–æ–≤–∏–π": "basic", "–±–∞–∑–æ–≤—ã–π": "basic", "basic": "basic",
    "–ø—Ä–æ—Å—É–Ω—É—Ç–∏–π": "advanced", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": "advanced", "advanced": "advanced",
    "–ø—Ä–µ–º—ñ—É–º": "premium", "–ø—Ä–µ–º–∏—É–º": "premium", "premium": "premium",
    "–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞": "free", "–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è": "free", "free": "free",
}

_ALLOWED_LANGS = {"uk", "ru", "en"}

def _norm_code_or_name(value: Optional[str]) -> Optional[str]:
    if not value:
        return None
    return "-".join(value.strip().lower().split())

def _normalize_code_from_name(subscription_name: Optional[str]) -> Optional[str]:
    if not subscription_name:
        return None
    norm = subscription_name.strip().lower()
    return _SYNONYM_TO_CODE.get(norm) or _norm_code_or_name(subscription_name)

# ---- routes ----

@router.get("/", response_model=List[SubscriptionOut])
def list_subscriptions(
    lang: Optional[str] = Query(None, description="uk|ru|en (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"),
    offset: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=500),
    db: Session = Depends(get_db),
):
    if lang and lang.strip().lower() not in _ALLOWED_LANGS:
        raise HTTPException(status_code=400, detail="lang must be 'uk', 'ru' or 'en'")
    return subscription_crud.list_subscriptions(db, lang=lang, offset=offset, limit=limit)

@router.get("/lookup", response_model=SubscriptionOut)
def lookup_subscription(
    subscription_id: Optional[int] = Query(None, description="ID –ø–æ–¥–ø–∏—Å–∫–∏"),
    subscription_name: Optional[str] = Query(
        None,
        description="–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞/–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è/Free, –ë–∞–∑–æ–≤–∏–π/–ë–∞–∑–æ–≤—ã–π/Basic, –ü—Ä–æ—Å—É–Ω—É—Ç–∏–π/–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π/Advanced, –ü—Ä–µ–º—ñ—É–º/–ü—Ä–µ–º–∏—É–º/Premium",
    ),
    lang: Optional[str] = Query(None, description="uk|ru|en (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"),
    db: Session = Depends(get_db),
):
    if lang and lang.strip().lower() not in _ALLOWED_LANGS:
        raise HTTPException(status_code=400, detail="lang must be 'uk', 'ru' or 'en'")

    if subscription_id is not None:
        sub = db.query(Subscription).filter(Subscription.id == subscription_id).first()
        if not sub:
            raise HTTPException(status_code=404, detail="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        if lang and (sub.language or "").lower() != lang.lower():
            raise HTTPException(status_code=404, detail="–ü–æ–¥–ø–∏—Å–∫–∞ —Å —Ç–∞–∫–∏–º —è–∑—ã–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return sub

    if subscription_name:
        code_or_name = _normalize_code_from_name(subscription_name)
        sub = subscription_crud.get_subscription_by_code(db, code_or_name, lang=lang)
        if not sub:
            raise HTTPException(status_code=404, detail="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return sub

    raise HTTPException(status_code=400, detail="Provide subscription_id or subscription_name")

@router.post("/start-free-subscription")
def start_free_subscription(
    user_id: int,
    lang: Optional[str] = Query("uk"),
    db: Session = Depends(get_db),
):
    if lang and lang.strip().lower() not in _ALLOWED_LANGS:
        raise HTTPException(status_code=400, detail="lang must be 'uk', 'ru' or 'en'")
    new_sub = subscription_crud.activate_subscription_by_code(
        db, user_id=user_id, code_or_name="free", lang=lang
    )
    return {"message": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", "subscription_id": new_sub.id}

@router.post("/activate-by-code")
def activate_by_code(
    user_id: int,
    subscription_name: str = Query(..., description="basic/advanced/premium/free –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏ (UK/RU/EN)"),
    lang: Optional[str] = Query(None, description="uk|ru|en (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"),
    db: Session = Depends(get_db),
):
    if lang and lang.strip().lower() not in _ALLOWED_LANGS:
        raise HTTPException(status_code=400, detail="lang must be 'uk', 'ru' or 'en'")

    code_or_name = _normalize_code_from_name(subscription_name)
    if not code_or_name:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è/–∫–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏")

    code_or_name = _SYNONYM_TO_CODE.get(code_or_name, code_or_name)
    new_sub = subscription_crud.activate_subscription_by_code(
        db, user_id=user_id, code_or_name=code_or_name, lang=lang
    )
    return {"message": "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", "subscription_id": new_sub.id}

@router.get("/active", response_model=UserSubscriptionOut)
def get_active_subscription(
    user_id_q: Optional[int] = Query(None, description="–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ–ª–ª–±–µ–∫"),
    user_id_tok: Optional[int] = Depends(get_user_id_optional),
    db: Session = Depends(get_db),
):
    user_id = user_id_tok or user_id_q
    if not user_id:
        raise HTTPException(status_code=401, detail="Auth required")
    return subscription_crud.get_user_active_subscription(db, user_id)

@router.put("/auto-renew")
def toggle_auto_renew(
    user_id: int,
    enable: bool,
    db: Session = Depends(get_db),
):
    updated = subscription_crud.set_auto_renew(db, user_id=user_id, enable=enable)
    return {"message": f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ {'–≤–∫–ª—é—á–µ–Ω–æ' if enable else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}", "updated": updated}

@router.get("/history", response_model=List[UserSubscriptionOut])
def get_subscription_history(
    user_id: int,
    offset: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=500),
    db: Session = Depends(get_db),
):
    return subscription_crud.get_user_subscription_history(db, user_id=user_id, offset=offset, limit=limit)

@router.put("/deactivate")
def deactivate_subscription(
    user_id: int,
    db: Session = Depends(get_db),
):
    updated = subscription_crud.deactivate_user_subscription(db, user_id=user_id)
    return {"message": "–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", "count": updated}

@router.get("/stats/active-by-plan")
def stats_active_by_plan(
    lang: Optional[str] = Query(None, description="ru|uk|en (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"),
    db: Session = Depends(get_db),
) -> List[Tuple[str, int]]:
    if lang and lang.strip().lower() not in _ALLOWED_LANGS:
        raise HTTPException(status_code=400, detail="lang must be 'uk', 'ru' or 'en'")
    return subscription_crud.count_active_by_plan(db, lang=lang)

# üîπ –ù–û–í–û–ï! –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –ø–ª–∞—Ç–µ–∂—É (user_id, payment_id)
@router.post("/activate-subscription")
def activate_subscription_from_payment(
    user_id: int = Query(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    payment_id: int = Query(..., description="ID –ø–ª–∞—Ç–µ–∂–∞"),
    db: Session = Depends(get_db),
):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ payments.
    –û–∂–∏–¥–∞–µ—Ç, —á—Ç–æ —É –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω subscription_id (–∏–ª–∏ –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç).
    """
    new_sub = subscription_crud.activate_subscription_from_payment(db, user_id=user_id, payment_id=payment_id)
    return {"message": "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –ø–ª–∞—Ç–µ–∂—É", "user_subscription_id": new_sub.id}
